// See README.txt for information and build instructions.

package CanOpenBridge;

//option java_package = "com.burkert.cop";
//option java_outer_classname = "CanOpenBridge";

// put an optional field here for every new classtype
message MessageWrapper {
  optional SDO SDO = 1;
  optional PDO PDO = 2;
  optional Event Event = 3;
  optional AddNode AddNode = 4;
  optional RemoveNode RemoveNode = 5;
  optional Commands Commands = 6;
  optional SYNC SYNC = 7;
  optional SdoProgress SdoProgress = 8;
  optional Request Request = 9;
  optional RequestProgress RequestProgress = 10;
  optional RawData RawData = 11;
  optional CanMeasure CanMeasure = 12;
}

message SDO {
  required int32 nodeId = 1;
  required int32 index = 2;
  required int32 subIndex = 3;
  enum Control {
    READ = 0;
    WRITE = 1;
	RESPONSE = 2;
	ABORT = 3;
	READ_BLOCK = 4;
	WRITE_BLOCK = 5;
  }
  required Control control = 4;
  optional bytes data = 5;
  optional int32 totalBlockLen = 6;
  optional uint64 timestamp = 7;
}

message PDO {
  required int32 nodeId = 6;
  required int32 pdoNumber = 7;
  required bytes data = 8;
  required uint64 timestamp = 9;
}

message Event {
  required int32 nodeId = 10;
  required bytes data = 11;
  required uint64 timestamp = 12;
  enum EventType {
    EMERGENCY = 0;
    BDO = 1;	
    SERVERINFO = 2;
	SERVERERROR = 3;
	NMT = 4;
  }
  required EventType eventType = 16;
}

message AddNode {
  required int32 nodeId = 13;
  optional int32 deviceStatus = 14;
}

message RemoveNode {
  required int32 nodeId = 14;
}

message Commands {
  enum Command {
    SHUTDOWN = 0;
    RESTART_SOCKET = 1;
  }
  required Command command = 15;
}

message SYNC {
  required uint32 flags = 17;
}

message SdoProgress {
  required int32 nodeId = 1;
  required int32 index = 2;
  required int32 subIndex = 3;
  required int32 value = 4;
}

message Request {
	enum RequestType {
		Complete = 0;
		SearchCANopenDevices = 1;
		GetLSS_Slave = 2;
		CnfLSS_Slave = 3;
		CanRawData = 4;
		CanMeasure = 5;
	}
	required RequestType requestType = 1;
	optional int32 nodeID = 2;
	optional int32 baudrate = 3;
	optional int32 result = 4;
	optional int32 vendorID = 5;
	optional int32 productCode = 6;
	optional int32 revisionNumber = 7;
	optional int32 serialNumber = 8;
	optional int32 rawDataActive = 9;
	optional int32 canMeasureActive = 10;
}

message RequestProgress {
	required int32 value = 1;
}
message RawData {
  required uint32 cobId = 1;
  required bytes data = 2;
  required uint64 timeStamp = 3;
  required bool direction = 4; 
}

message CanMeasure{
required int32 errorFlags = 1;
required int32 canHRise = 2;
required int32 canHFall = 3;
required int32 canLRise = 4;
required int32 canLFall = 5;
}
